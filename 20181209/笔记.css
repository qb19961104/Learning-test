正则表达式:
使用情况：
1.验证手机号,身份证,邮箱等
2.匹配或替换特定形式的文本

创建RegExp对象
1.var patt1=/pattern/attributes;
 var reg=/abc/;
2.var patt2=new RegExp();
 var reg=new RegExp("abc");
 var str="123abc";
 console.log(reg.test(str));

特殊字符需要转义：
 . / \ * ? + [ ] ( ) {  } ^ $ |

重复：
量词元字符(跟数字有关)：
n+        匹配任何包含至少一个n的字符串
n*        匹配任何包含零个或多个n的字符串 
n？       匹配任何包含零个或一个n的字符串 
n{X}      匹配包含x个n的序列的字符串
n{X,Y}    匹配包含x到y之间任意数字的序列的字符串
n{X,}     匹配包含至少x个n的序列的字符串

匹配一个范围内字符：
[abc]     匹配指定集合内的任意字符
[^abc]    匹配不在指定集合内的任意字符
[0-9]     匹配任意一个数字
[a-z]     匹配任意一个小写字母
[A-Z]     匹配任意一个大写字母
exp1|exp2 使用|进行条件选择
(exp1)    使用()指定分组--子表达式

元字符:拥有特殊含义的字符,进行简化
\d        匹配一个数字
\D        匹配一个非数字
\w        匹配一个数字/字母/下划线
\W        匹配一个非数字/字母/下划线
\s        匹配一个空白字符
\S        匹配一个非空白字符
.         匹配除了回车和换行外的任何单个字符

匹配指定位置
^         匹配字符串的开头
$         匹配字符串的结尾
\b        匹配单词的边界
\B        匹配单词的非边界
?=x       匹配其后紧接x的字符串
?|x       匹配一个非空白字符

修饰符
I         ignoreCase,执行对大小写不敏感的匹配
G         global，执行全局匹配(并非一次成功就结束)
M         multiline,允许执行多行匹配

RegExp的方法：
compile()  
exec()     将匹配的值返回到一个数组中
test()


